<?php
// +----------------------------------------------------------------------
// | ThinkCMF [ WE CAN DO IT MORE SIMPLE ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013-2018 http://www.thinkcmf.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: Powerless < wzxaini9@gmail.com>
// +----------------------------------------------------------------------
namespace app\speed\controller;

use app\speed\model\MemberModel;
use cmf\controller\ApiController;
use cmf\lib\juhe;
use think\Db;
use think\Exception;
use think\Validate;
use cmf\controller\HomeBaseController;


class MemberController extends ApiController
{
    public function _initialize()
    {

        parent::_initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * 用户首页信息
     */
    public function getmember()
    {
        $re['msg'] = '成功！';
        $re['code'] = 1000;
        $re['data'] = array();
        $usercode = $this->request->param('code');
        $token = $this->request->param('token');

        if (empty($token)) {
            $re['msg'] = '用户token不存在！';
            $re['code'] = 2101;
            goto end;
        }
        if (empty($usercode)) {
            $re['msg'] = '用户code不存在！';
            $re['code'] = 2102;
            goto end;
        }
        $res = $this->checkToken($usercode, $token);
        if ($res['code'] != 1000) {
            $re = $res;
            goto end;
        }

        $mem = new MemberModel();
        $where = ['E_UserCode' => $usercode];
        $field = 'a.E_Name,a.E_HeadImg,a.E_Email,a.E_IsInvestor,a.E_IsIdentityCard,count(b.E_Money) as coupon,count(c.id) as ordernum,d.E_Points,d.E_Balance,e.E_Name as grade,count(f.id) as iswx';
        $join = [
            ['member_coupon b', 'a.E_UserCode=b.E_UserCode', 'LEFT'],
            ['order c', 'a.E_UserCode=c.E_UserCode', 'LEFT'],
            ['member_wallet d', 'a.E_UserCode=d.E_UserCode', 'LEFT'],
            ['member_grade e', 'e.E_PointsAmount>d.E_Min and e.E_PointsAmount<d.E_Max', 'LEFT'],
            ['E_IsIdentityCard f', 'a.E_UserCode=f.E_UserCode', 'LEFT'],
        ];
        $re['data'] = $mem->alias('a')->where($where)->join($join)->field($field)->find();

        end:
        return $this->ajaxreturn($re);

    }

    /**
     * 用户详细信息
     */
    public function getinfo()
    {
        $re['msg'] = '成功！';
        $re['code'] = 1000;
        $re['data'] = array();
        $usercode = $this->request->param('code');
        $token = $this->request->param('token');

        if (empty($token)) {
            $re['msg'] = '用户token不存在！';
            $re['code'] = 2201;
            goto end;
        }
        if (empty($usercode)) {
            $re['msg'] = '用户code不存在！';
            $re['code'] = 21202;
            goto end;
        }
        $res = $this->checkToken($usercode, $token);
        if ($res['code'] != 1000) {
            $re = $res;
            goto end;
        }

        $mem = new MemberModel();
        $where = ['E_UserCode', $usercode];
        $field = 'E_Mobile,E_Name,E_HeadImg,E_IsInvestor,E_IsIdentityCard,E_Email';
        $re['data'] = $mem->where($where)->field($field)->find();

        return $this->ajaxreturn($re);
    }

    /**
     * 修改昵称
     */
    public function updateName()
    {
        $re['msg'] = '成功！';
        $re['code'] = 1000;
        $name = $this->request->param('name');
        $oldname = $this->request->param('oldname');
        $usercode = $this->request->param('code');
        $token = $this->request->param('token');

        if (empty($token)) {
            $re['msg'] = '用户token不存在！';
            $re['code'] = 2301;
            goto end;
        }
        if (empty($usercode)) {
            $re['msg'] = '用户code不存在！';
            $re['code'] = 2302;
            goto end;
        }
        $res = $this->checkToken($usercode, $token);
        if ($res['code'] != 1000) {
            $re = $res;
            goto end;
        }
        if (empty($name)){
            $re['msg'] = '新昵称为空！';
            $re['code'] = 2303;
            goto end;
        }

        if ($name != $oldname) {
            $mem = new  MemberModel();
            $result=$mem->where(['E_UserCode' => $usercode])->save(['E_Name' => $name]);
            if ($result===false){
                $re['msg'] = '修改失败！';
                $re['code'] = 2304;
                goto end;
            }
        } else {
            $re['msg'] = '未作修改！';
            $re['code'] = 2305;
            goto end;
        }
    }

    /**
     * 更新密码
     */
    public function updatePWD()
    {
        $re['msg'] = '成功！';
        $re['code'] = 1000;
        $oldpwd = $this->request->param('oldpwd');
        $newpwd = $this->request->param('newpwd');
        $againpwd = $this->request->param('againpwd');
        $usercode = $this->request->param('code');
        $token = $this->request->param('token');

        if (empty($token)) {
            $re['msg'] = '用户token不存在！';
            $re['code'] = 2401;
            goto end;
        }
        if (empty($usercode)) {
            $re['msg'] = '用户code不存在！';
            $re['code'] = 2402;
            goto end;
        }
        $res = $this->checkToken($usercode, $token);
        if ($res['code'] != 1000) {
            $re = $res;
            goto end;
        }
        if (empty($oldpwd) ) {
            $re['msg'] = '请输入原密码！';
            $re['code'] = 2403;
            goto end;
        }
        if ($newpwd != $againpwd) {
            $re['msg'] = '两次输入的密码不一致！';
            $re['code'] = 2404;
            goto end;
        }

        $mem = new MemberModel();
        $where = ['E_UserCode' => $usercode];
        $findpwd = $mem->where($where)->value('E_PWDMD5');
        if ($findpwd != cmf_encryption($oldpwd)) {
            $re['msg'] = '原密码不正确！';
            $re['code'] = 2405;
            goto end;
        }
        $result=$mem->where($where)->save(['E_PWDMD5' => cmf_encryption($newpwd)]);
        if ($result===false){
            $re['msg'] = '修改失败！';
            $re['code'] = 2406;
            goto end;
        }
        end:
        return $this->ajaxreturn($re);
    }

    /**
     * 实名制
     */
    public function realName()
    {
        $re['msg'] = '成功！';
        $re['code'] = 1000;
        $truename = $this->request->param('name');
        $idcardnumber = $this->request->param('cardnumber');
        $usercode = $this->request->param('code');
        $token = $this->request->param('token');

        if (empty($token)) {
            $re['msg'] = '用户token不存在！';
            $re['code'] = 2501;
            goto end;
        }
        if (empty($usercode)) {
            $re['msg'] = '用户code不存在！';
            $re['code'] = 2502;
            goto end;
        }
        $res = $this->checkToken($usercode, $token);
        if ($res['code'] != 1000) {
            $re = $res;
            goto end;
        }
        if (empty($truename) || !preg_match('/^[\u4e00,\u9fa5]{2,9}$/', $truename)) {
            $re['msg'] = '真实姓名不合法！';
            $re['code'] = 2503;
            goto  end;
        }
        if (empty($idcardnumber) || ！preg_match('/^[1,8][1,5][0,9]{15}[0-9x]$/', $idcardnumber)) {
            $re['msg'] = '身份证号码不合法！';
            $re['code'] = 2504;
            goto  end;
        }
//        身份证与真实姓名合法性验证（需接口）
        $juhe = new juhe();
        $res=$juhe->ckeckIDcard($idcardnumber, $truename);
        if ($res['error_code']==0){
                if ($res['result']['res']==1){
                    $re['msg'] = '身份证和姓名不一致！';
                    $re['code'] = 2505;
                    goto  end;
                }
        }else{
            $re['msg'] = '验证失败！';
            $re['code'] = 2506;
            goto  end;
        }
//        $res = $this->CheckNameAndIDCard($truename, $idcardnumber);
//        if ($res != 1000) {
//            $re = $res;
//            goto  end;
//        }
        //入库
        $mem = new MemberModel();
        $where = ['E_UserCode', $usercode];
        $data = [
            ['E_IdentityCard', $idcardnumber],
            ['E_TrueName', $truename]
        ];
        $result=$mem->where($where)->save($data);
        if ($result===false){
            $re['msg'] = '实名制失败！';
            $re['code'] = 2507;
            goto end;
        }
        end:
        return $this->ajaxreturn($re);
    }

    /**
     * 绑定邮箱
     */
    public function updateEmail()
    {
        $re['msg'] = '成功！';
        $re['code'] = 1000;
        $mail = $this->request->param('email');
        $usercode = $this->request->param('code');
        $token = $this->request->param('token');

        if (empty($token)) {
            $re['msg'] = '用户token不存在！';
            $re['code'] = 2601;
            goto end;
        }
        if (empty($usercode)) {
            $re['msg'] = '用户code不存在！';
            $re['code'] = 2602;
            goto end;
        }
        $res = $this->checkToken($usercode, $token);
        if ($res['code'] != 1000) {
            $re = $res;
            goto end;
        }

        if (!preg_match('/^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+)*@([a-zA-Z0-9][-_.])+[a-zA-Z0-9]{2,3}$/', $mail)) {
            $re['msg'] = '邮箱格式不正确！';
            $re['code'] = 2603;
            goto end;
        }
        $mem = new MemberModel();
        $where = ['E_UserCode' => $usercode];
        $data = ['E_Email' => $mail];
        $result=$mem->where($where)->save($data);
        if ($result===false){
            $re['msg'] = '实名制失败！';
            $re['code'] = 2507;
            goto end;
        }
        end:
        return $re;

    }
}
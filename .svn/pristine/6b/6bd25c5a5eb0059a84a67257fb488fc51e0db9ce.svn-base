<?php
// +----------------------------------------------------------------------
// | ThinkCMF [ WE CAN DO IT MORE SIMPLE ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013-2018 http://www.thinkcmf.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: 小夏 < 449134904@qq.com>
// +----------------------------------------------------------------------
namespace app\admin\controller;

use app\admin\model\MemberModel;
use cmf\controller\AdminBaseController;
use think\Db;
use app\admin\model\ConfigModel;

class MemberController extends AdminBaseController
{

    public function _initialize()
    {
        $adminSettings = cmf_get_option('admin_settings');
        if (empty($adminSettings['admin_password']) || $this->request->path() == $adminSettings['admin_password']) {
            $adminId = cmf_get_current_admin_id();
            if (empty($adminId)) {
                session("__LOGIN_BY_CMF_ADMIN_PW__", 1);//设置后台登录加密码
            }
        }

        parent::_initialize();
    }

    /**
     * 会员列表
     */

    public function index()
    {
        $where = array();
        $start = $this->request->param('start_time') ? $this->request->param('start_time') : '';
        $end = $this->request->param('end_time') ? $this->request->param('end_time') : '';
        $key = $this->request->param('keyword') ? $this->request->param('keyword') : '';
        $card = $this->request->param('card') ? $this->request->param('card') : '';
        $name = $this->request->param('name') ? $this->request->param('name') : '';
        $mobile = $this->request->param('mobile') ? $this->request->param('mobile') : '';
        if (!empty($start) && !empty($end)) {
            $where['a.E_CreateDate'] = [['gt', strtotime($start)], ['lt', strtotime($end) + 24 * 3600]];
            $this->assign('start_time', $start);
            $this->assign('end_time', $end);
        } else {
            if (!empty($start)) {
                $where['a.E_CreateDate'] = ['gt', strtotime($start)];
                $this->assign('start_time', $start);
            }
            if (!empty($end)) {
                $where['a.E_CreateDate'] = ['lt', strtotime($end)];
                $this->assign('end_time', $end);
            }
        }

        if (!empty($card)) {
            $where['a.E_CardNo'] = ['like', '%' . $card . '%'];
            $this->assign('card', $card);

        }
        if (!empty($name)) {
            $where['a.E_TrueName'] = ['like', '%' . $name . '%'];
            $this->assign('name', $name);

        }
        if (!empty($key)) {
            $where['a.E_Name'] = ['like', '%' . $key . '%'];
            $this->assign('key', $key);
        }
        if (!empty($mobile)) {
            $where['a.E_Mobile'] = ['like', '%' . $mobile . '%'];
            $this->assign('mobile', $mobile);
        }
//        dump($key);
//        dump($this->request->param());
//        dump($where);
        $mem = new MemberModel();

        $field = 'a.E_UserID,a.E_Mobile,a.E_IdentityCard,a.E_Name,from_unixtime(a.E_CreateDate,"%Y-%m-%d  %H:%i:%s") E_CreateDate,a.E_HeadImg,a.E_CardNo,a.E_Sex,a.E_TrueName,b.E_OpenID';
        $join = [];
        $list = $mem->alias('a')->where($where)
                ->join('member_other_login b', 'a.E_UserID=b.E_UserID', 'left')->order('E_CreateDate desc')
                ->field($field)->paginate($this->limit,false,['query'=>$this->request->param()]);
//        debug_zval_dump($mem->getLastSql());
//        dump($list->toArray());
        $this->assign('start_time', $start);
        $this->assign('end_time', $end);
        $this->assign('key', $key);
        $this->assign('card', $card);
        $this->assign('mobile', $mobile);
        $this->assign('list', $list->items());
        $this->assign('page', $list->render());
        return $this->fetch();
    }

    public function plan()
    {
        $userid = $this->request->param('user');
        if (!empty($userid)) {
            $start = $this->request->param('start_time') ? $this->request->param('start_time') : '';
            $end = $this->request->param('end_time') ? $this->request->param('end_time') : '';
            $project = $this->request->param('project') ? $this->request->param('project') : '';
            $plan = $this->request->param('plan') ? $this->request->param('plan') : '';
            $where = ['E_UserID' => $userid];
            if (!empty($start) && !empty($end)) {
                $where['E_CreateTime'] = [['gt', strtotime($start)], ['lt', strtotime($end) + 24 * 3600]];
                $this->assign('start_time', $start);
                $this->assign('end_time', $end);
            } else {
                if (!empty($start)) {
                    $where['E_CreateTime'] = ['gt', strtotime($start)];
                    $this->assign('start_time', $start);
                }
                if (!empty($end)) {
                    $where['E_CreateTime'] = ['lt', strtotime($end) + 24 * 3600];
                    $this->assign('end_time', $end);
                }
            }
            if (!empty($project)) {
                $where['E_ProjectName'] = ['like', '%' . $project . '%'];
                $this->assign('project', $project);

            }
            if (!empty($plan)) {
                $where['E_PlanName'] = ['like', '%' . $plan . '%'];
                $this->assign('plan', $plan);

            }
            $plans = Db::name('member_plan')->where($where)->order('E_CreateTime desc')
                ->field('from_unixtime(E_CreateTime,"%Y-%m-%d") E_CreateTime,E_OrderSn,(E_PlanPrice*0.01) E_PlanPrice,(E_Value*0.01) E_Value,E_BuyNum,E_PlanName,E_ProjectName,E_Cycle,E_BillCycle,E_BillDay,E_SettlementCycle,E_SettlementDay,E_BillDate,E_SettlementDate,E_Scale,E_SumPeriods,E_AreadlyPeriids')
                ->paginate($this->limit,false,['query'=>$this->request->param()]);
            $this->assign('plans', $plans->items());
            $this->assign('user', $userid);
            $this->assign('page', $plans->render());

            return $this->fetch();
        } else {
            $this->redirect('index');
        }
    }
    public function plans()
    {

            $start = $this->request->param('start_time') ? $this->request->param('start_time') : '';
            $end = $this->request->param('end_time') ? $this->request->param('end_time') : '';
            $project = $this->request->param('project') ? $this->request->param('project') : '';
            $plan = $this->request->param('plan') ? $this->request->param('plan') : '';
            $where = [];
            if (!empty($start) && !empty($end)) {
                $where['a.E_CreateTime'] = [['gt', strtotime($start)], ['lt', strtotime($end) + 24 * 3600]];
                $this->assign('start_time', $start);
                $this->assign('end_time', $end);
            } else {
                if (!empty($start)) {
                    $where['a.E_CreateTime'] = ['gt', strtotime($start)];
                    $this->assign('start_time', $start);
                }
                if (!empty($end)) {
                    $where['a.E_CreateTime'] = ['lt', strtotime($end) + 24 * 3600];
                    $this->assign('end_time', $end);
                }
            }
            if (!empty($project)) {
                $where['a.E_ProjectName'] = ['like', '%' . $project . '%'];
                $this->assign('project', $project);

            }
            if (!empty($plan)) {
                $where['a.E_PlanName'] = ['like', '%' . $plan . '%'];
                $this->assign('plan', $plan);

            }
            $plans = Db::name('member_plan')->alias('a')->where($where)->join('member b','a.E_UserID=b.E_UserID')->order('a.E_CreateTime desc')
                ->field('from_unixtime(a.E_CreateTime,"%Y-%m-%d") E_CreateTime,a.E_OrderSn,(a.E_PlanPrice*0.01) E_PlanPrice,(a.E_Value*0.01) E_Value,a.E_BuyNum,a.E_PlanName,a.E_ProjectName,a.E_Cycle,a.E_BillCycle,a.E_BillDay,a.E_SettlementCycle,a.E_SettlementDay,a.E_BillDate,a.E_SettlementDate,a.E_Scale,a.E_SumPeriods,a.E_AreadlyPeriids,b.E_Name,b.E_Mobile,b.E_TrueName')
                ->paginate($this->limit,false,['query'=>$this->request->param()]);
            $this->assign('plans', $plans->items());
            $this->assign('page', $plans->render());

            return $this->fetch();

    }
    public function house()
    {
        $userid = $this->request->param('user');
        if (!empty($userid)) {
            $start = $this->request->param('start_time') ? $this->request->param('start_time') : '';
            $end = $this->request->param('end_time') ? $this->request->param('end_time') : '';
            $project = $this->request->param('project') ? $this->request->param('project') : '';
            $plan = $this->request->param('plan') ? $this->request->param('plan') : '';
            $where = ['E_UserID' => $userid];
            if (!empty($start) && !empty($end)) {
                $where['E_CreateTime'] = [['gt', strtotime($start)], ['lt', strtotime($end) + 24 * 3600]];
                $this->assign('start_time', $start);
                $this->assign('end_time', $end);
            } else {
                if (!empty($start)) {
                    $where['E_CreateTime'] = ['gt', strtotime($start)];
                    $this->assign('start_time', $start);
                }
                if (!empty($end)) {
                    $where['E_CreateTime'] = ['lt', strtotime($end) + 24 * 3600];
                    $this->assign('end_time', $end);
                }
            }

            if (!empty($project)) {
                $where['E_ProjectName'] = ['like', '%' . $project . '%'];
                $this->assign('project', $project);

            }
            if (!empty($plan)) {
                $where['E_PlanName'] = ['like', '%' . $plan . '%'];
                $this->assign('plan', $plan);

            }
            $coupons = Db::name('member_plan_coupon')->where($where)->order('E_CreateTime desc')
                                                    ->field('from_unixtime(E_CreateTime,"%Y-%m-%d") E_CreateTime,E_OrderSn,(E_PlanPrice*0.01) E_PlanPrice,(E_Value*0.01) E_Value,E_BuyNum,E_PlanName,E_ProjectName,E_Cycle,E_CouponCycle,E_CouponTime,E_Scale,E_SumPeriods,E_AreadlyPeriids,E_State')
                                                    ->paginate($this->limit,false,['query'=>$this->request->param()]);
            $this->assign('coupons', $coupons->items());
            $this->assign('user', $userid);
            $this->assign('page', $coupons->render());
            return $this->fetch();
        } else {
            $this->redirect('index');
        }
    }
    public function bill()
    {
        $userid = $this->request->param('user');
        if (!empty($userid)) {
            $billtime = $this->request->param('bill_time') ? $this->request->param('bill_time') : '';
            $settime = $this->request->param('set_time') ? $this->request->param('set_time') : '';
            $project = $this->request->param('project') ? $this->request->param('project') : '';
            $plan = $this->request->param('plan') ? $this->request->param('plan') : '';
            $ordersn = $this->request->param('ordersn') ? $this->request->param('ordersn') : '';
            $where = ['E_UserID' => $userid];

            if (!empty($billtime)) {
                $where['E_BillDate'] = substr($billtime,0,7);
                $this->assign('bill_time', $billtime);
            }
            if (!empty($settime)) {
                $where['E_SettlementDate'] =substr($settime,0,7);
                $this->assign('set_time', $settime);
            }
            if (!empty($ordersn)) {
                $where['E_OrderSn'] = ['like', '%' . $ordersn . '%'];
                $this->assign('ordersn', $ordersn);

            }

            if (!empty($project)) {
                $where['E_ProjectName'] = ['like', '%' . $project . '%'];
                $this->assign('project', $project);

            }
            if (!empty($plan)) {
                $where['E_PlanName'] = ['like', '%' . $plan . '%'];
                $this->assign('plan', $plan);

            }
//            dump($where);
            $bills = Db::name('member_bill')->where($where)->order('E_CreateDate desc')
                                            ->field('from_unixtime(E_CreateDate,"%Y-%m-%d") E_CreateDate,E_State,E_OrderSn,(E_PlanPrice*0.01) E_PlanPrice,(E_BillPrice*0.01) E_BillPrice,E_PlanName,E_ProjectName,E_BillDay,E_BillDate,E_SettlementDay,E_SettlementDate,E_Scale,E_SumPeriods,E_Periids,E_Abstract')
                                            ->paginate($this->limit,false,['query'=>$this->request->param()]);
            $this->assign('bills', $bills->items());
            $this->assign('user', $userid);
            $this->assign('page', $bills->render());
            return $this->fetch();
        } else {
            $this->redirect('index');
        }
    }
    public function house_list()
    {
        $userid = $this->request->param('user');

        if (!empty($userid)) {
            $start = $this->request->param('start_time') ? $this->request->param('start_time') : '';
            $end = $this->request->param('end_time') ? $this->request->param('end_time') : '';
            $project = $this->request->param('project') ? $this->request->param('project') : '';
            $plan = $this->request->param('plan') ? $this->request->param('plan') : '';
            $ordersn = $this->request->param('ordersn')?$this->request->param('ordersn'):'';
//
//            $bill_id=Db::name('member_house_bill')->where(['E_OrderSn'=>$ordersn])->value('id');
            $where = ['E_UserID' => $userid];

            if (!empty($start) && !empty($end)) {
                $where['E_CreateTime'] = [['gt', strtotime($start)], ['lt', strtotime($end) + 24 * 3600]];
                $this->assign('start_time', $start);
                $this->assign('end_time', $end);
            } else {
                if (!empty($start)) {
                    $where['E_CreateTime'] = ['gt', strtotime($start)];
                    $this->assign('start_time', $start);
                }
                if (!empty($end)) {
                    $where['E_CreateTime'] = ['lt', strtotime($end)+ 24 * 3600];
                    $this->assign('end_time', $end);
                }
            }
            if (!empty($project)) {
                $where['E_ProjectName'] = ['like', '%' . $project . '%'];
                $this->assign('project', $project);

            }
            if (!empty($ordersn)) {
                $where['E_OrderSn'] = ['like', '%' . $ordersn . '%'];
                $this->assign('ordersn', $ordersn);

            }
            if (!empty($plan)) {
                $where['E_PlanName'] = ['like', '%' . $plan . '%'];
                $this->assign('plan', $plan);
            }
//            dump($where);
            $coupon = Db::name('member_house_coupon')->where($where)->order('E_CreateTime desc')->field('from_unixtime(E_CreateTime,"%Y-%m-%d") E_CreateTime,E_SN,E_OrderSn,(E_Price*0.01) E_Price,(E_HasPrice*0.01) E_HasPrice,E_LastDate,E_Periods,E_CouponImg,E_ProjectName,E_PlanName')->paginate($this->limit);
            $this->assign('sets', $coupon->items());
            $this->assign('user', $userid);
            $this->assign('page', $coupon->render());
            return $this->fetch();
        } else {
            $this->redirect('index');
        }
    }
    public function settlement()
    {
        $userid = $this->request->param('user');
        if (!empty($userid)) {
            $settime = $this->request->param('set_time') ? $this->request->param('set_time') : '';
            $project = $this->request->param('project') ? $this->request->param('project') : '';
            $plan = $this->request->param('plan') ? $this->request->param('plan') : '';
            $ordersn = $this->request->param('ordersn') ? $this->request->param('ordersn') : '';
            $where = ['E_UserID' => $userid];

            if (!empty($settime)) {
                $where['E_Month'] =substr($settime,0,7);
                $this->assign('set_time', $settime);
            }
            if (!empty($ordersn)) {
                $where['E_OrderSn'] = ['like', '%' . $ordersn . '%'];
                $this->assign('ordersn', $ordersn);

            }
            if (!empty($project)) {
                $where['E_ProjectName'] = ['like', '%' . $project . '%'];
                $this->assign('project', $project);

            }
            if (!empty($plan)) {
                $where['E_PlanName'] = ['like', '%' . $plan . '%'];
                $this->assign('plan', $plan);
            }
//            dump($where);
            $sets = Db::name('member_settlement')->where($where)->order('E_CreateDate desc')
                                                ->field('from_unixtime(E_CreateDate,"%Y-%m-%d") E_CreateDate,E_OrderSn,(E_PlanPrice*0.01) E_PlanPrice,(E_BillPrice*0.01) E_BillPrice,E_Month,E_Day,E_Abstract,E_ProjectName,E_PlanName,E_Month,E_Day')
                                                ->paginate($this->limit,false,['query'=>$this->request->param()]);
            $this->assign('sets', $sets->items());
            $this->assign('user', $userid);
            $this->assign('page', $sets->render());
            return $this->fetch();
        } else {
            $this->redirect('index');
        }
    }
    public function consumption(){
        $user=$this->request->param('user');
        if (!empty($user)){
            $type = $this->request->param('type') ? $this->request->param('type') : '';
            $status = $this->request->param('status') ? $this->request->param('status') : '';
            $where = ['E_UserID' => $user];

            if (!empty($type)) {
                $where['E_Type'] =$type;

            }
            if (!empty($status)) {
                $where['E_State'] =$status;

            }

//            dump($where);
            $consumption = Db::name('member_consumption_bill')->where($where)->order('E_CreateDate desc')
                                                                ->field('from_unixtime(E_CreateDate,"%Y-%m-%d") E_CreateDate,E_State,(E_Money*0.01) E_Money,E_Type,E_Last,E_Abstract')
                                                                ->paginate($this->limit,false,['query'=>$this->request->param()]);
            $this->assign('consumption', $consumption->items());
            $this->assign('user', $user);
            $this->assign('page', $consumption->render());
            $this->assign('status', $status);
            $this->assign('type', $type);
            return $this->fetch();
        }else{
            return $this->redirect('index');
        }
    }
    public function balance(){
        $user=$this->request->param('user');
        if (!empty($user)){
            $type = $this->request->param('type') ? $this->request->param('type') : '';
            $status = $this->request->param('status') ? $this->request->param('status') : '';
            $where = ['E_UserID' => $user];

            if (!empty($type)) {
                $where['E_Type'] =$type;

            }
            if (!empty($status)) {
                $where['E_State'] =$status;

            }

            $balance = Db::name('member_balance_bill')->where($where)->order('E_CreateDate desc')
                                                        ->field('from_unixtime(E_CreateDate,"%Y-%m-%d") E_CreateDate,E_State,(E_Money*0.01) E_Money,E_Type,E_Last,E_Abstract')
                                                        ->paginate($this->limit,false,$this->request->param());
            $this->assign('balance', $balance->items());
            $this->assign('user', $user);
            $this->assign('page', $balance->render());
            $this->assign('type', $type);
            $this->assign('status', $status);
            return $this->fetch();
        }else{
            return $this->redirect('index');
        }
    }
}
